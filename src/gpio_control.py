from gpiozero import OutputDevice, Button, DigitalInputDevice, DigitalOutputDevice
import logging
import threading
from src import emergency
import time
#CH1-p25-GPIO26
class GPIOControl:
    def __init__(self, relay_pin, ac_Sensor_Relay_COM,ac_Sensor_Relay_NO, button_pin, gpio_lock,emergency_lock,current_playing_scheduler):
        self.relay = OutputDevice(relay_pin, active_high=False, initial_value=False)
        self.ac_Sensor_Relay_COM = DigitalInputDevice(ac_Sensor_Relay_COM)
        self.ac_Sensor_Relay_NO=DigitalOutputDevice(ac_Sensor_Relay_NO,initial_value=True)
        self.button = Button(button_pin, pull_up=True, bounce_time=0.2)
        self.is_on=False#theo d√µi tr·∫°ng th√°i relay (ƒë√£ b·∫≠t hay ch∆∞a).
        self.status_speaker = False # ƒë·∫°i di·ªán cho tr·∫°ng th√°i ho·∫°t ƒë·ªông ‚Äúth·ª±c t·∫ø‚Äù c·ªßa ampli
        self.gpio_lock = gpio_lock  # üí° Th√™m lock ƒë·ªÉ thread-safe
        self.emergency_lock=emergency_lock
        self.current_playing_scheduler=current_playing_scheduler
        self.is_Playing_emergency=False
        # logging.basicConfig(filename='logs/app.log', level=logging.INFO,
        #                     format='%(asctime)s [%(threadName)s] %(levelname)s: %(message)s')
    def turn_on_amplifier(self):
        with self.gpio_lock:
            if self.is_on:
                return None
            self.relay.on()
            logging.info(f"‚úÖ Amplifier chua b·∫≠t v√† self.ac_Sensor_Relay_COM.value = {self.ac_Sensor_Relay_COM.value}")
            time.sleep(2.5)  # ‚è±Ô∏è Ch·ªù ampli kh·ªüi ƒë·ªông v√† c·∫£m bi·∫øn d√≤ng ·ªïn ƒë·ªãnh
            logging.info(f"‚úÖ Amplifier ƒë√£ b·∫≠t v√† self.ac_Sensor_Relay_COM.value = {self.ac_Sensor_Relay_COM.value}")
            #if self.ac_Sensor_Relay_COM.value == 1:  # 0 = c√≥ d√≤ng ƒëi·ªán ‚Üí ampli OK
            if 1: # Mac finh la bat thanh cong, chua ket nnoi voi AC_sensor_relay
                self.status_speaker = True
                self.is_on = True
                logging.info("‚úÖ Amplifier ƒë√£ b·∫≠t v√† ho·∫°t ƒë·ªông b√¨nh th∆∞·ªùng (c√≥ d√≤ng ƒëi·ªán).")
            else:
                self.relay.off()
                self.status_speaker = False
                self.is_on = False
                logging.warning("‚ùå Amplifier b·∫≠t th·∫•t b·∫°i: kh√¥ng ph√°t hi·ªán d√≤ng ƒëi·ªán.")
            

    def turn_off_amplifier(self):
        with self.gpio_lock:
            if not self.is_on:
                return None
            
            self.relay.off()
            self.status_speaker = False
            self.is_on=False
            logging.info("Amplifier turned OFF")

    def get_amplifier_status(self):
        return self.ac_Sensor_Relay_COM.value  # 1 n·∫øu c√≥ t√≠n hi·ªáu, 0 n·∫øu kh√¥ng

    def add_emergency_callback(self, callback):
        if not self.emergency_lock.is_set() and not self.current_playing_scheduler[0] and (not self.is_Playing_emergency):
            self.button.when_pressed = callback
        # self.button.when_pressed = lambda: play_priority_announcement(audio, emergency_lock, resource_lock)
