import serial
import time
import json
import logging
from src import constant
import os
class SIM7600X:
    def __init__(self,allowedNumbersPath, port="/dev/ttyUSB2", baudrate=115200):
        # self.ser = serial.Serial(port, baudrate, timeout=1)
        

        #Lay cac so dien thoai co trong file config
        self.allowedNumbersPath=allowedNumbersPath
        self.allowed_numbers = self.load_allowed_numbers()
        # self.call_active = False
        # logging.basicConfig(filename='logs/app.log', level=logging.INFO,
        #                     format='%(asctime)s [%(threadName)s] %(levelname)s: %(message)s')

        if not os.path.exists(port):
            logging.error(f"‚ùå Port {port} kh√¥ng t·ªìn t·∫°i. Ki·ªÉm tra l·∫°i k·∫øt n·ªëi USB.")
            raise RuntimeError(f"Port {port} kh√¥ng t·ªìn t·∫°i")

        try:
            self.ser = serial.Serial(port, baudrate, timeout=1)
            logging.info(f"‚úÖ ƒê√£ k·∫øt n·ªëi t·ªõi c·ªïng {port}")
        except serial.SerialException as e:
            logging.error(f"‚ùå Kh√¥ng th·ªÉ m·ªü port {port}: {e}")
            raise RuntimeError(f"L·ªói khi m·ªü c·ªïng serial: {e}")
        except OSError as e:
            logging.error(f"‚ùå L·ªói h·ªá th·ªëng khi m·ªü port {port}: {e}")
            raise RuntimeError(f"L·ªói h·ªá th·ªëng: {e}")





    def load_allowed_numbers(self):
        try:
            with open(self.allowedNumbersPath, 'r') as f:
                readed_data=json.load(f)
                return readed_data['numbers']
        except Exception as e:
            logging.error(f"Failed to load allowed numbers: {e}")
            return []
    # ham check_call duoc goi lie tuc de lang nghe cuoc goi, neu co cuo goi thi kt so dth, dung thi tra ve true con khong thi tra ve false
    def check_call(self):# kiem tra neu dung so dien thoai hay khong, neu dung tra ve true, neu sai tra ve false
        try:
            self.ser.write(b'AT+CLCC\r')
            time.sleep(0.5)
            # response = self.ser.read(1000).decode()
            response = self.ser.read_all().decode(errors='ignore')
            for line in response.splitlines():
                if "+CLCC:" in line:
                    parts = line.split(',')
                    if len(parts) >= 5:
                        number = parts[5].strip('"') if len(parts) >= 6 else None
                        if number in self.allowed_numbers:
                            return 1
                        else:# co so goi den nhung khong dung so dien thoai cho phep, tat ngay lap tuc
                            # self.hang_up()
                            return -1

        except serial.SerialException as e:
            logging.error(f"Serial error: {e}")
            # return False
            return 0

    #tao mot ham kiem tra trang thai cuoc goi: co 3 trang thai chinh
    #dang do chuong
    # dang dam thoai
#     Gi√° tr·ªã state	√ù nghƒ©a
# 0	ƒêang k·∫øt n·ªëi (active)=> dangf dam thoai
# 1	ƒêang gi·ªØ (held)
# 2	ƒêang quay s·ªë (dialing)
# 3	Chu√¥ng ƒëang ph√°t (alerting)=> dung cho ben may goi
# 4	C√≥ cu·ªôc g·ªçi ƒë·∫øn (incoming) => dung cho ben may nhan
# 5	Cu·ªôc g·ªçi ƒëang ch·ªù (waiting)
# 6	Ng·∫Øt k·∫øt n·ªëi (disconnect)
    def get_call_state(self):
        try:
            self.ser.write(b'AT+CLCC\r')
            time.sleep(0.5)
            response = self.ser.read_all().decode(errors='ignore')

            for line in response.splitlines():
                if "+CLCC:" in line:
                    parts = line.split(',')
                    if len(parts) >= 3:
                        state = int(parts[2])  # L·∫•y tr·∫°ng th√°i cu·ªôc g·ªçi
                        return state  # Ch·ªâ l·∫•y tr·∫°ng th√°i ƒë·∫ßu ti√™n

            return -1  # Kh√¥ng c√≥ cu·ªôc g·ªçi n√†o

        except Exception as e:
            logging.error(f"L·ªói khi l·∫•y tr·∫°ng th√°i cu·ªôc g·ªçi: {e}")
            return -1

    def extract_caller_id(self, response):#lay so dien thoai khi nhan cuoc goi tra ve so dang string
        for line in response.split('\n'):
            if "+CLCC" in line:
                parts = line.split(',')
                if len(parts) > 5:
                    return parts[5].strip('"')
        return ""
    def answer_call(self):
        try:
            self.ser.write(b'ATA\r')  # Nh·∫•c m√°y
            time.sleep(1)
            # self.ser.write(b'AT+CMIC=0,10\r')  # TƒÉng mic
            # self.ser.write(b'AT+CSDVC=3\r')   # Chuy·ªÉn sang loa ngo√†i
            logging.info("‚úÖ ƒê√£ nh·∫•c m√°y")
            # self.call_active = True
        except Exception as e:
            logging.error(f"L·ªói khi nh·∫•c m√°y: {e}")
    
    def hang_up(self):
        try:
            self.ser.write(b'AT+CHUP\r')  # Ng·∫Øt cu·ªôc g·ªçi
            time.sleep(1)
            logging.info("üì¥ ƒê√£ k·∫øt th√∫c cu·ªôc g·ªçi")
            # self.call_active = False
        except Exception as e:
            logging.error(f"L·ªói khi k·∫øt th√∫c cu·ªôc g·ªçi: {e}")

